// miniblip led matrix demo


// main button:         P0_23
// progr button:        P0_1
// vibration/tilt:      P1_15
// external buttons:    P0_15, P0_14, P0_13, P0_12, P0_11
// encoder:             P0_20, P0_2
// encoder button:      P1_19
// ext (top/left):      P0_21 


#include "mbed.h"
#include "neopixel.h"

// Matrix led output pin

// Matrix led output pin
#define MATRIX_PIN P0_9
#define NLEDS 25

AnalogIn   ain(P0_16);

unsigned int counter = 0;   

neopixel::Pixel buffer[NLEDS];
PwmOut speaker(P0_8);

void setPixel(uint32_t posicion, uint8_t red, uint8_t green, uint8_t blue) {
  buffer[posicion].red=red;
  buffer[posicion].green=green;
  buffer[posicion].blue=blue;
}

int main()
{
 //   serial.printf("Hello world!\n");    
    while(true) {   
        float pot = ain.read();
        
        int num_led = floor((pot-0.90)*400);
        if (num_led > 4){
            num_led= 4;
        }
        num_led=num_led % 5;
        
 //       serial.printf("mini blip is alive for %i seconds.\n", counter);
 //       serial.printf("Pot: %3.3f%%\n", pot);
        counter++;  
        float poti = 1;
        float brillo = 10;
        int rojo = floor(poti*brillo);
        int verde = floor(poti*brillo);
        int azul = floor(poti*brillo);
        neopixel::PixelArray array(MATRIX_PIN);
        for(int i=0;i<NLEDS;i++) {
            setPixel(i, 0, 0, 0);
        }
             for(int ii=0;ii<5;ii++) {
                setPixel(ii, 0, 0, 0);
                setPixel((num_led * 5) + ii, rojo, verde, azul);
            }            
                
        array.update(buffer, NLEDS); 

    }
}
